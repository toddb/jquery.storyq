storyQ : jQuery feed parser plugin
Copyright (C) 2008 toddb
Dual licensed under the MIT (MIT-license.txt)
and GPL (GPL-license.txt) licenses.

Dependencies
============

* JQuery
* Treeview

Usage
=====
<html>
<head>

<link rel="stylesheet" href="lib/treeview/jquery.treeview.css" />
<link rel="stylesheet" href="css/storyq.treeview.css" />
<link rel="stylesheet" href="css/storyq.screen.css" />

<script src="lib/jquery/jquery.js" type="text/javascript"></script>
<script src="lib/jquery/jquery.cookie.js" type="text/javascript"></script>
<script src="lib/treeview/jquery.treeview.js" type="text/javascript"></script>
<script src="jquery.storyq.js" type="text/javascript"></script>

</head>
<body>
<div id="sidetree">
	<div class="treeheader">&nbsp;</div>
	<div id="sidetreecontrol"><a href="?#">Collapse All</a> | <a href="?#">Expand All</a></div>

	<ul id="tree" class="storyq"/>

</div>

</div>

<script type="text/javascript">

$(function () {

    $('#tree').storyq({
        url: 'tests/data/results-01.xml',		
        success: function() {
			
					$("#tree").treeview({
						collapsed: false,
						animated: "medium",
						control:"#sidetreecontrol",
						persist: "location"
					});
			
	    }    
    });
});

</body>
</html>


    jQuery.storyq(options);  [storyQ.getResults]
    
    options:
    
    * url: the feed URL (required).
    * data: the jQuery DOM selector id.
    * load: a pre-processing callback function that can be overridden for populating the treeview (object -> list).
    * success: a function to be called if the request succeeds.
      The function gets passed one argument: the StoryQResults object.
    
    Example:
    
    $('#tree).storyq({
        url: 'results.xml',
        success: function(feed) {
            alert(feed.version);
        }
    });
    
Basic structure of object as hierarchical tree:
  story > scenario > narrative > test
    
StoryQResults properties
================

    * feed.version
    * feed.items: an array of StoryQItem
    
StoryQItem properties
====================

    * item.type: story, scenario, narrative, test
    * item.title
    * item.tests
    * item.result: passed, failed, pending [default]
    * item.description
    * item.items: an array of StoryQItem
    * item.id

Please see the provided examples and units/spec tests for more information.

